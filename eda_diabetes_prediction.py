# -*- coding: utf-8 -*-
"""EDA_Diabetes Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aRwy7TTDFwhxUJ5cZ69a40lU0Okot_LL
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

data=pd.read_csv('diabetes.csv')

data.describe()

data.info()

data.isnull().sum()

data.duplicated().sum()

plt.figure(figsize=(10,6))
sns.countplot(x='Outcome', data=data)
plt.show()

plt.figure(figsize=(10,6))
for i,col in enumerate(['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']):
    plt.subplot(3,3,i+1)
    sns.boxplot(x=col, data=data)
#dotes are the Outliers

sns.pairplot(data, hue='Outcome')
#orange(1)-having Diabetes
#blue(0)-Not having Diabetes

plt.figure(figsize=(10,6))
for i,col in enumerate(['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age']):
    plt.subplot(3,3,i+1)
    sns.histplot(x=col, data=data, kde = True)

plt.figure(figsize=(10,6))
sns.heatmap(data.corr(), annot=True)

from sklearn.preprocessing import StandardScaler
sc_x=StandardScaler()
X=pd.DataFrame(sc_x.fit_transform(data.drop(["Outcome"],axis=1),),columns=['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age'])

X.head()

y=data['Outcome']

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=0)

from sklearn.neighbors import KNeighborsClassifier
test_scores=[]
train_score=[]
for i in range(1,15):
  knn=KNeighborsClassifier(i)
  knn.fit(X_train,y_train)
  train_score.append(knn.score(X_train,y_train))
  test_scores.append(knn.score(X_test,y_test))

max_train_score=max(train_score)
max_test_score=max(test_scores)
train_score_ind=[i for i,v in enumerate(train_score) if v==max_train_score]
test_score_ind=[i for i,v in enumerate(test_scores) if v==max_test_score]
print('Max Train score {} % and k={}'.format(max_train_score*100,list(map(lambda x:x+1, train_score_ind))))
print('Max Test score {} % and k={}'.format(max_test_score*100,list(map(lambda x:x+1, test_score_ind))))

plt.figure(figsize=(12,6))
plt.plot(range(1,15),train_score,color='blue', marker='+',label='Training Accuracy')
plt.plot(range(1,15),test_scores,color='red',marker='*',label='Testing Accuracy')
plt.legend()

knn=KNeighborsClassifier(13)
knn.fit(X_train,y_train)
knn.score(X_test,y_test)

from sklearn.metrics import confusion_matrix
y_pred=knn.predict(X_test)
confusion_matrix(y_test,y_pred)

from sklearn.metrics import classification_report
print(classification_report(y_test,y_pred))